{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar Contract = require('web3-eth-contract');\n\nvar namehash = require('eth-ens-namehash');\n\nvar PromiEvent = require('web3-core-promievent');\n\nvar REGISTRY_ABI = require('../ressources/ABI/Registry');\n\nvar RESOLVER_ABI = require('../ressources/ABI/Resolver');\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\n\n\nfunction Registry(ens) {\n  var self = this;\n  this.ens = ens;\n  this.contract = ens.checkNetwork().then(function (address) {\n    var contract = new Contract(REGISTRY_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n}\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method owner\n * @param {string} name\n * @param {function} callback\n * @return {Promise<any>}\n */\n\n\nRegistry.prototype.owner = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    contract.methods.owner(namehash.hash(name)).call().then(function (receipt) {\n      promiEvent.resolve(receipt);\n\n      if (_.isFunction(callback)) {\n        callback(receipt);\n      }\n    }).catch(function (error) {\n      promiEvent.reject(error);\n\n      if (_.isFunction(callback)) {\n        callback(error);\n      }\n    });\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method resolver\n * @param {string} name\n * @return {Promise<Contract>}\n */\n\n\nRegistry.prototype.resolver = function (name) {\n  var self = this;\n  return this.contract.then(function (contract) {\n    return contract.methods.resolver(namehash.hash(name)).call();\n  }).then(function (address) {\n    var contract = new Contract(RESOLVER_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n};\n\nmodule.exports = Registry;","map":null,"metadata":{},"sourceType":"script"}