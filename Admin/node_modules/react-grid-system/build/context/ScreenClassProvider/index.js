'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScreenClassContext = exports.NO_PROVIDER_FLAG = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../../utils');

var _config = require('../../config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window */


var NO_PROVIDER_FLAG = exports.NO_PROVIDER_FLAG = 'NO_PROVIDER_FLAG';

var ScreenClassContext = exports.ScreenClassContext = _react2.default.createContext(NO_PROVIDER_FLAG);

var ScreenClassProvider = function (_PureComponent) {
  _inherits(ScreenClassProvider, _PureComponent);

  function ScreenClassProvider(props) {
    _classCallCheck(this, ScreenClassProvider);

    var _this = _possibleConstructorReturn(this, (ScreenClassProvider.__proto__ || Object.getPrototypeOf(ScreenClassProvider)).call(this, props));

    _this.state = {
      screenClass: (0, _config.getConfiguration)().defaultScreenClass
    };

    _this.screenClassRef = _react2.default.createRef();
    _this.setScreenClass = _this.setScreenClass.bind(_this);
    return _this;
  }

  _createClass(ScreenClassProvider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setScreenClass();
      window.addEventListener('resize', this.setScreenClass, false);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.setScreenClass, false);
    }
  }, {
    key: 'setScreenClass',
    value: function setScreenClass() {
      var useOwnWidth = this.props.useOwnWidth;


      var source = useOwnWidth && this.screenClassRef && this.screenClassRef.current;
      var currScreenClass = (0, _utils.getScreenClass)(source);
      if (currScreenClass !== this.state.screenClass) {
        this.setState({ screenClass: currScreenClass });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var screenClass = this.state.screenClass;
      var _props = this.props,
          children = _props.children,
          useOwnWidth = _props.useOwnWidth;


      return _react2.default.createElement(
        ScreenClassContext.Provider,
        { value: screenClass },
        useOwnWidth ? _react2.default.createElement(
          'div',
          { ref: this.screenClassRef },
          children
        ) : _react2.default.createElement(
          _react2.default.Fragment,
          null,
          children
        )
      );
    }
  }]);

  return ScreenClassProvider;
}(_react.PureComponent);

ScreenClassProvider.propTypes = {
  /**
   * Children of the ScreenClassProvider.
   * This should be all your child React nodes that are using `react-grid-system`.
   */
  children: _propTypes2.default.node.isRequired,
  /**
   * Boolean to determine whether own width should be used as source.
   * When provided, the screen class is derived from own dimensions instead of the window.
   */
  useOwnWidth: _propTypes2.default.bool
};
ScreenClassProvider.defaultProps = {
  useOwnWidth: false
};
exports.default = ScreenClassProvider;